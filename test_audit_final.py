#!/usr/bin/env python3
"""
Final test of the corrected audit for MX65W network.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from meraki_client import MerakiClient

def test_final_audit_behavior():
    """Test that the audit now correctly handles MX65W integrated wireless."""
    
    print("üß™ FINAL AUDIT TEST - MX65W WIRELESS SECURITY")
    print("=" * 60)
    
    meraki_client = MerakiClient()
    network_id = 'L_669347494617957322'  # Mt Lawley (MX65W)
    
    print("üìã INFRASTRUCTURE DETECTION:")
    
    # Get devices to confirm infrastructure type
    devices = meraki_client.dashboard.networks.getNetworkDevices(network_id)
    mx_with_wifi = [d for d in devices if d.get('model', '').startswith('MX') and ('W' in d.get('model', '') or 'w' in d.get('model', ''))]
    mr_devices = [d for d in devices if d.get('model', '').startswith('MR')]
    
    print(f"  MX with WiFi: {len(mx_with_wifi)} devices")
    print(f"  MR devices: {len(mr_devices)} devices")
    
    if mx_with_wifi and not mr_devices:
        print("‚úÖ INFRASTRUCTURE TYPE: MX integrated wireless only")
    else:
        print("‚ùå UNEXPECTED: This should be MX-only")
        return False
    
    print("\\nüì° WIRELESS API COMPARISON:")
    
    # Test WRONG API (MR wireless)
    print("‚ùå WRONG API (for MR access points):")
    try:
        ssid_wrong = meraki_client.dashboard.wireless.getNetworkWirelessSsid(network_id, '0')
        print(f"  wireless.getNetworkWirelessSsid says: {ssid_wrong.get('authMode')} - {ssid_wrong.get('name')}")
    except Exception as e:
        print(f"  Error: {e}")
    
    # Test CORRECT API (MX appliance)
    print("‚úÖ CORRECT API (for MX integrated wireless):")
    try:
        ssids_correct = meraki_client.dashboard.appliance.getNetworkApplianceSsids(network_id)
        secure_count = 0
        for ssid in ssids_correct:
            if ssid.get('enabled'):
                auth = ssid.get('authMode', '')
                name = ssid.get('name', 'Unnamed')
                has_psk = bool(ssid.get('psk'))
                
                print(f"  appliance.getNetworkApplianceSsids says: {auth} - {name}")
                if auth == 'psk' and has_psk:
                    print(f"    ‚úÖ SECURE: WPA/WPA2 PSK configured")
                    secure_count += 1
                elif auth == 'open':
                    print(f"    ‚ùå INSECURE: Open network")
                
        print(f"\\nüìä SECURITY SUMMARY:")
        print(f"  Secure SSIDs found: {secure_count}")
        
        if secure_count > 0:
            print("üéâ SUCCESS: Audit should now report SECURE wireless")
            return True
        else:
            print("‚ö†Ô∏è WARNING: No secure SSIDs found")
            return False
            
    except Exception as e:
        print(f"  Error: {e}")
        return False

if __name__ == "__main__":
    success = test_final_audit_behavior()
    
    print("\\n" + "=" * 60)
    print("üéØ FINAL RESULT:")
    if success:
        print("‚úÖ AUDIT FIX SUCCESSFUL!")
        print("‚úÖ MX65W wireless security correctly detected as SECURE")
        print("‚úÖ No more false 'open WiFi' warnings")
        print("‚úÖ Using correct MX appliance wireless API")
        print("\\nThe audit will now show accurate security status for MX*W networks.")
    else:
        print("‚ùå AUDIT FIX FAILED - Review implementation")
    print("=" * 60)