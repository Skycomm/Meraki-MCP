#!/usr/bin/env python3
"""
Cisco Meraki MCP Server - Model Context Protocol server for Meraki API integration.
"""

import asyncio
import json
import mcp.server as mcp
import mcp.types as types
from mcp.server.stdio import stdio_server
from meraki_client import MerakiClient
from utils.helpers import format_resource_uri, create_resource, create_content, format_error_message
from config import SERVER_NAME, SERVER_VERSION

# Initialize Meraki client
meraki = MerakiClient()

# Initialize MCP server
app = mcp.Server(SERVER_NAME, SERVER_VERSION)

# ===== RESOURCES =====

@app.list_resources()
async def list_resources() -> list[types.Resource]:
    """
    List available Meraki resources.
    
    Returns:
        List of MCP Resource objects
    """
    resources = []
    
    try:
        # Get organizations for the top-level resource
        organizations = meraki.get_organizations()
        resources.append(create_resource(
            format_resource_uri("organizations"),
            "Organizations",
            "All Meraki organizations"
        ))
        
        # Add individual organization resources
        for org in organizations:
            org_id = org['id']
            resources.append(create_resource(
                format_resource_uri("organizations", org_id),
                f"Organization: {org['name']}",
                f"Meraki organization {org['name']} ({org_id})"
            ))
            
            # Add networks resource for this organization
            resources.append(create_resource(
                format_resource_uri("networks", f"org/{org_id}"),
                f"Networks in {org['name']}",
                f"All networks in organization {org['name']}"
            ))
            
            # Get networks for this organization and add as resources
            try:
                networks = meraki.get_organization_networks(org_id)
                for network in networks:
                    network_id = network['id']
                    resources.append(create_resource(
                        format_resource_uri("networks", network_id),
                        f"Network: {network['name']}",
                        f"Meraki network {network['name']} in {org['name']}"
                    ))
                    
                    # Add devices resource for this network
                    resources.append(create_resource(
                        format_resource_uri("devices", f"network/{network_id}"),
                        f"Devices in {network['name']}",
                        f"All devices in network {network['name']}"
                    ))
            except Exception as e:
                app.request_context.session.send_log_message(
                    level="warning",
                    data=f"Failed to get networks for organization {org_id}: {str(e)}"
                )
        
    except Exception as e:
        app.request_context.session.send_log_message(
            level="error",
            data=f"Failed to list resources: {str(e)}"
        )
        
    return resources

@app.read_resource()
async def read_resource(uri: str) -> list[types.ResourceContent]:
    """
    Read a specific Meraki resource.
    
    Args:
        uri: Resource URI to read
        
    Returns:
        List of MCP ResourceContent objects
    """
    contents = []
    
    try:
        parts = uri.split('://')
        if len(parts) != 2 or not parts[1]:
            raise ValueError(f"Invalid resource URI format: {uri}")
        
        path_parts = parts[1].split('/')
        resource_type = path_parts[0]
        
        # Handle different resource types
        if resource_type == "organizations":
            if len(path_parts) == 1:
                # List all organizations
                data = meraki.get_organizations()
                contents.append(create_content(uri, data))
            else:
                # Get specific organization
                org_id = path_parts[1]
                data = meraki.get_organization(org_id)
                contents.append(create_content(uri, data))
                
        elif resource_type == "networks":
            if len(path_parts) == 1:
                raise ValueError("Network ID or organization ID required")
            elif path_parts[1].startswith("org/"):
                # Get networks for an organization
                org_id = path_parts[1].split('/')[1]
                data = meraki.get_organization_networks(org_id)
                contents.append(create_content(uri, data))
            else:
                # Get specific network
                network_id = path_parts[1]
                data = meraki.get_network(network_id)
                contents.append(create_content(uri, data))
                
        elif resource_type == "devices":
            if len(path_parts) == 1:
                raise ValueError("Device serial or network ID required")
            elif path_parts[1].startswith("network/"):
                # Get devices for a network
                network_id = path_parts[1].split('/')[1]
                data = meraki.get_network_devices(network_id)
                contents.append(create_content(uri, data))
            else:
                # Get specific device
                serial = path_parts[1]
                data = meraki.get_device(serial)
                contents.append(create_content(uri, data))
        else:
            raise ValueError(f"Unsupported resource type: {resource_type}")
            
    except Exception as e:
        app.request_context.session.send_log_message(
            level="error",
            data=f"Failed to read resource {uri}: {str(e)}"
        )
        # Return error as content
        contents.append(types.ResourceContent(
            uri=uri, 
            mimeType="text/plain", 
            text=format_error_message(e)
        ))
        
    return contents

# ===== TOOLS =====

@app.tool(
    name="list_organizations",
    description="List all Meraki organizations the API key has access to",
    annotations={
        "title": "List Organizations",
        "readOnlyHint": True,
        "openWorldHint": False
    }
)
async def list_organizations() -> str:
    """
    List all organizations the API key has access to.
    
    Returns:
        Formatted list of organizations
    """
    try:
        organizations = meraki.get_organizations()
        
        if not organizations:
            return "No organizations found for this API key."
            
        result = "### Organizations\n\n"
        for org in organizations:
            result += f"- **{org['name']}**\n"
            result += f"  - ID: `{org['id']}`\n"
            if 'url' in org:
                result += f"  - URL: {org['url']}\n"
                
        return result
        
    except Exception as e:
        return f"Failed to list organizations: {str(e)}"

@app.tool(
    name="get_organization_networks",
    description="Get all networks in a Meraki organization",
    annotations={
        "title": "Get Organization Networks",
        "readOnlyHint": True,
        "openWorldHint": False
    }
)
async def get_organization_networks(org_id: str) -> str:
    """
    Get all networks in a specific organization.
    
    Args:
        org_id: Organization ID
        
    Returns:
        Formatted list of networks
    """
    try:
        networks = meraki.get_organization_networks(org_id)
        
        if not networks:
            return f"No networks found for organization {org_id}."
            
        result = f"### Networks in Organization {org_id}\n\n"
        for network in networks:
            result += f"- **{network['name']}**\n"
            result += f"  - ID: `{network['id']}`\n"
            result += f"  - Type: {', '.join(network.get('productTypes', ['Unknown']))}\n"
            if 'timeZone' in network:
                result += f"  - Time Zone: {network['timeZone']}\n"
            if 'tags' in network and network['tags']:
                result += f"  - Tags: {', '.join(network['tags'])}\n"
                
        return result
        
    except Exception as e:
        return f"Failed to get networks for organization {org_id}: {str(e)}"

@app.tool(
    name="get_network_devices",
    description="Get all devices in a Meraki network",
    annotations={
        "title": "Get Network Devices",
        "readOnlyHint": True,
        "openWorldHint": False
    }
)
async def get_network_devices(network_id: str) -> str:
    """
    Get all devices in a specific network.
    
    Args:
        network_id: Network ID
        
    Returns:
        Formatted list of devices
    """
    try:
        devices = meraki.get_network_devices(network_id)
        
        if not devices:
            return f"No devices found for network {network_id}."
            
        result = f"### Devices in Network {network_id}\n\n"
        for device in devices:
            result += f"- **{device.get('name', 'Unnamed Device')}**\n"
            result += f"  - Model: {device.get('model', 'Unknown')}\n"
            result += f"  - Serial: `{device.get('serial', 'Unknown')}`\n"
            result += f"  - MAC: {device.get('mac', 'Unknown')}\n"
            if 'lanIp' in device:
                result += f"  - LAN IP: {device['lanIp']}\n"
            if 'firmware' in device:
                result += f"  - Firmware: {device['firmware']}\n"
            if 'networkId' in device:
                result += f"  - Network ID: `{device['networkId']}`\n"
                
        return result
        
    except Exception as e:
        return f"Failed to get devices for network {network_id}: {str(e)}"

@app.tool(
    name="get_device_details",
    description="Get detailed information about a specific Meraki device",
    annotations={
        "title": "Get Device Details",
        "readOnlyHint": True,
        "openWorldHint": False
    }
)
async def get_device_details(serial: str) -> str:
    """
    Get detailed information about a specific device.
    
    Args:
        serial: Device serial number
        
    Returns:
        Formatted device information
    """
    try:
        device = meraki.get_device(serial)
        
        if not device:
            return f"No device found with serial {serial}."
            
        result = f"### Device {device.get('name', 'Unnamed Device')}\n\n"
        result += f"- **Serial**: `{device.get('serial', 'Unknown')}`\n"
        result += f"- **Model**: {device.get('model', 'Unknown')}\n"
        result += f"- **MAC Address**: {device.get('mac', 'Unknown')}\n"
        
        if 'lanIp' in device:
            result += f"- **LAN IP**: {device['lanIp']}\n"
        if 'firmware' in device:
            result += f"- **Firmware**: {device['firmware']}\n"
        if 'networkId' in device:
            result += f"- **Network ID**: `{device['networkId']}`\n"
        if 'lat' in device and 'lng' in device:
            result += f"- **Location**: {device['lat']}, {device['lng']}\n"
        if 'address' in device:
            result += f"- **Address**: {device['address']}\n"
        if 'notes' in device and device['notes']:
            result += f"- **Notes**: {device['notes']}\n"
        if 'tags' in device and device['tags']:
            result += f"- **Tags**: {', '.join(device['tags'])}\n"
        if 'status' in device:
            result += f"- **Status**: {device['status']}\n"
            
        return result
        
    except Exception as e:
        return f"Failed to get details for device {serial}: {str(e)}"

@app.tool(
    name="get_network_clients",
    description="Get clients connected to a Meraki network",
    annotations={
        "title": "Get Network Clients",
        "readOnlyHint": True,
        "openWorldHint": False
    }
)
async def get_network_clients(network_id: str, timespan: int = 86400) -> str:
    """
    Get clients connected to a network within a specified timespan.
    
    Args:
        network_id: Network ID
        timespan: Timespan in seconds (default: 86400 - 24 hours)
        
    Returns:
        Formatted list of clients
    """
    try:
        clients = meraki.get_network_clients(network_id, timespan)
        
        if not clients:
            return f"No clients found for network {network_id} in the last {timespan} seconds."
            
        result = f"### Clients in Network {network_id} (Last {timespan} seconds)\n\n"
        result += f"Found {len(clients)} clients.\n\n"
        
        for client in clients[:25]:  # Limit to 25 clients to avoid excessively long responses
            result += f"- **{client.get('description', 'Unknown Device')}**\n"
            if 'mac' in client:
                result += f"  - MAC: {client['mac']}\n"
            if 'ip' in client:
                result += f"  - IP: {client['ip']}\n"
            if 'manufacturer' in client:
                result += f"  - Manufacturer: {client['manufacturer']}\n"
            if 'os' in client:
                result += f"  - OS: {client['os']}\n"
            if 'user' in client and client['user']:
                result += f"  - User: {client['user']}\n"
            if 'vlan' in client:
                result += f"  - VLAN: {client['vlan']}\n"
                
        if len(clients) > 25:
            result += f"\n*Showing 25 of {len(clients)} clients. Use resource access for complete data.*"
            
        return result
        
    except Exception as e:
        return f"Failed to get clients for network {network_id}: {str(e)}"

@app.tool(
    name="get_ssids",
    description="Get wireless SSIDs configured in a Meraki network",
    annotations={
        "title": "Get Network SSIDs",
        "readOnlyHint": True,
        "openWorldHint": False
    }
)
async def get_ssids(network_id: str) -> str:
    """
    Get wireless SSIDs configured in a network.
    
    Args:
        network_id: Network ID
        
    Returns:
        Formatted list of SSIDs
    """
    try:
        ssids = meraki.get_network_wireless_ssids(network_id)
        
        if not ssids:
            return f"No SSIDs found for network {network_id}."
            
        result = f"### SSIDs in Network {network_id}\n\n"
        for ssid in ssids:
            result += f"- **SSID {ssid.get('number', '?')}: {ssid.get('name', 'Unnamed')}**\n"
            result += f"  - Enabled: {'Yes' if ssid.get('enabled', False) else 'No'}\n"
            result += f"  - Visible: {'Yes' if ssid.get('visible', False) else 'No'}\n"
            if 'authMode' in ssid:
                result += f"  - Auth Mode: {ssid['authMode']}\n"
            if 'encryptionMode' in ssid:
                result += f"  - Encryption: {ssid['encryptionMode']}\n"
            if 'ipAssignmentMode' in ssid:
                result += f"  - IP Assignment: {ssid['ipAssignmentMode']}\n"
            if 'minBitrate' in ssid:
                result += f"  - Min Bitrate: {ssid['minBitrate']} Mbps\n"
            if 'bandSelection' in ssid:
                result += f"  - Band: {ssid['bandSelection']}\n"
                
        return result
        
    except Exception as e:
        return f"Failed to get SSIDs for network {network_id}: {str(e)}"

@app.tool(
    name="get_vlans",
    description="Get VLANs configured in a Meraki network",
    annotations={
        "title": "Get Network VLANs",
        "readOnlyHint": True,
        "openWorldHint": False
    }
)
async def get_vlans(network_id: str) -> str:
    """
    Get VLANs configured in a network.
    
    Args:
        network_id: Network ID
        
    Returns:
        Formatted list of VLANs
    """
    try:
        vlans = meraki.get_network_vlans(network_id)
        
        if not vlans:
            return f"No VLANs found for network {network_id}."
            
        result = f"### VLANs in Network {network_id}\n\n"
        for vlan in vlans:
            result += f"- **VLAN {vlan.get('id', '?')}: {vlan.get('name', 'Unnamed')}**\n"
            if 'subnet' in vlan:
                result += f"  - Subnet: {vlan['subnet']}\n"
            if 'applianceIp' in vlan:
                result += f"  - Appliance IP: {vlan['applianceIp']}\n"
            if 'dhcpHandling' in vlan:
                result += f"  - DHCP: {vlan['dhcpHandling']}\n"
            if 'dhcpLeaseTime' in vlan:
                result += f"  - DHCP Lease Time: {vlan['dhcpLeaseTime']}\n"
            if